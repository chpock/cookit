
export LDFLAGS
export CFLAGS
export CC
export CXX
export RC
export STRIP
export PKG_CONFIG

CHECK_TARGETS = tcl tk tclvfs cookfs cookit twapi tclmtls tdom tclhttps
ALL_TARGETS   = $(CHECK_TARGETS) zlib tkcon thread

COOKIT_ROOT = /cookit

# Required for WSL
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)

    WSLENV = TCL_LIBRARY/p:COOKIT_CONSOLE:COOKIT_GUI:COOKIT_BOOTSTRAP:TCLTEST_OPTIONS:COOKIT_VERSION
    export WSLENV

    EXE_EXT = .exe

endif

.PHONY: $(ALL_TARGETS)

.PHONY: $(patsubst %,test-%,$(ALL_TARGETS))

.PHONY: $(patsubst %,clean-%,$(ALL_TARGETS))

.PHONY: all clean test dist distclean

all: $(TARGETS)
	@echo
	@echo "Now type: make dist"
	@echo

# Note #1.

# We want to link Tcl with our specific zlib for the following reasons:
#   1. Our zlib is static. We will be sure that the binaries are
#      independent of the system shared zlib.
#   2. We want to update the zlib version as we need it
#   3. We want to share zlib procedures between Tcl and other
#      packages/libraries

# Unfortunatelly, the Tcl autoconf system does not allow us to specify
# the location of the zlib used. Below, we will use hacky ways to achive that.

# Note #2.

# TEA scripts scripts have a bug when CFLAGS are defined as:
#     <package defined CFLAGS> ${CFLAGS_DEFAULT} ${CFLAGS_WARNING}
# and the compile variable defined to use:
#     $(CFLAGS_DEFAULT) $(CFLAGS_WARNING) $(CFLAGS)
# as a result, the compiler flags will be as follows:
#     $(CFLAGS_DEFAULT) $(CFLAGS_WARNING) <package defined CFLAGS> ${CFLAGS_DEFAULT} ${CFLAGS_WARNING}
# Normally, duplicating compiler flags does not cause problems.
# However, we want to set -Os optimization in <package defined CFLAGS>,
# and the -O2 switch in ${CFLAGS_DEFAULT} overrides it. To avoid this behavior,
# we will set CFLAGS explicitly for extensions that are built using TEA scripts.
# By doing this, we will override CFLAGS in generated Makefile.
# This does not work with tkdnd because its Makefile.in is not updated and
# the COMPILE variable does not contain the $(CFLAGS_DEFAULT) variable.

tcl: work/stamp-tcl
work/stamp-tcl: work/stamp-zlib
	mkdir -p work/tcl/src && cp -r "$(TOP_SRCDIR)/deps/tcl"/* work/tcl/src
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)
# See details about this patch in its file.
	patch -N -p1 -d work/tcl/src < "$(TOP_SRCDIR)"/deps/tcl-010-Windows-fix-CFLAGS.patch
endif
# See description about this patch in the patch file
	patch -N -p1 -d work/tcl/src < "$(TOP_SRCDIR)"/deps/tcl-020-All-do-not-use-exe-directory.patch
# Use our zlib. Specify paths to zlib by CFLAGS/LDFLAGS
	cd work/tcl; \
	    test -f config.status \
	    || CFLAGS="$(CFLAGS) -I$(PREFIX)/include" LDFLAGS="$(LDFLAGS) -L$(PREFIX)/lib -lz" \
	    ./src/$(TCL_SYSTEM)/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-encoding=utf-8 \
	        --disable-shared --enable-static \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
ifeq ($(WINDOWS_SYSTEM),Cygwin)
# See details about this patch in its file.
	patch -N -p1 -d work/tcl < "$(TOP_SRCDIR)"/deps/tcl-000-Windows-Cygwin.patch
endif
# Patch Makefile to avoid an error during parallel builds
	$(SEDI) -E \
	    -e 's/(install-msgs|install-tzdata):/& $$(TCLSH)/' \
	    work/tcl/Makefile
# Use our zlib: remove zlib objs from the list of linking objects
	$(SEDI) -e 's#^\([[:space:]]*ZLIB_OBJS\)#\1_MASKED#' \
	    work/tcl/Makefile
#	$(SEDI) -e 's#^\(ZLIB_DIR[[:space:]]*=\).*#\1 $(TOP_SRCDIR)/deps/zlib#' \
#	    work/tcl/Makefile
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)
# On Windows, Tcl uses LDFLAGS_CONSOLE / LDFLAGS_WINDOW when linking tclsh,
# but ignores LDFLAGS. This means that our zlib will be ignored in tclsh.
# Let's fix that by adding $(LDFLAGS) to LDFLAGS_CONSOLE / LDFLAGS_WINDOW.
	$(SEDI) -E -e 's/^[[:space:]]*LDFLAGS_(CONSOLE|WINDOW).*/& $$(LDFLAGS)/' \
	    work/tcl/Makefile
endif
# Tcl hardcodes the library path in the tclUnixInit.c file according to
# the TCL_LIBRARY and TCL_PACKAGE_PATH variables. This is not what we need,
# as the current installation is being done to a temporary location that
# should never be used. To get around this issue, we will override these
# variables to the library path within VFS. This only needs to be done for
# the compile step, not the install steps. Install steps should be able
# to install libraries to the temporary location.
	cd work/tcl && $(MAKE) all \
	    TCL_LIBRARY="$(COOKIT_ROOT)/lib/tcl\$$(VERSION)" \
	    TCL_PACKAGE_PATH="$(COOKIT_ROOT)/lib"
	cd work/tcl && $(MAKE) install-binaries install-libraries
# Tcl installs headers on Windows in scope of the install-libraries target. But on other
# platforms, there is a separate target 'install-headers'.
	grep -q '^install-headers:' work/tcl/Makefile && \
	    cd work/tcl && $(MAKE) install-headers || : no-op
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)
# Fix for the build with MinGW. Library is specified in wrong format.
	$(SEDI) -e 's/ lib\(tcl[^.]\+\)\.a/ -l\1/g' $(PREFIX)/lib/tclConfig.sh
endif
	touch $@

tk: work/stamp-tk
work/stamp-tk: work/stamp-tcl
	mkdir -p work/tk/src && cp -r "$(TOP_SRCDIR)/deps/tk"/* work/tk/src
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)
# See details about this patch in its file.
	patch -N -p1 -d work/tk/src < "$(TOP_SRCDIR)"/deps/tk-010-Windows-fix-CFLAGS.patch
endif
ifeq ($(IJ_PLATFORM),MacOS-X)
# see details in the patch
	patch -N -p1 -d work/tk/src < "$(TOP_SRCDIR)"/deps/tk-000-MacOS-X-fix-TKNSString.patch
endif
# Tk doesn't depent on zlib directly. However, whish binary depends on Tcl static
# library and the Tcl static library needs zlib. We should specify our zlib
# via LDFLAGS.
	cd work/tk; \
	    test -f config.status \
	    || LDFLAGS="$(LDFLAGS) -L$(PREFIX)/lib -lz" \
	    ./src/$(TCL_SYSTEM)/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST)  \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        $(if $(filter unix,$(TCL_SYSTEM)),--disable-rpath) \
	        $(TK_SHARED_FLAG) \
	        $(AQUA_FLAG) $(SYMBOLS_FLAG) $(THREADS_FLAG)
ifeq ($(findstring Windows,$(IJ_PLATFORM)),Windows)
# On Windows, Tk uses LDFLAGS_CONSOLE / LDFLAGS_WINDOW when linking wish,
# but ignores LDFLAGS. This means that our zlib will be ignored in wish.
# Let's fix that by adding $(LDFLAGS) to LDFLAGS_CONSOLE / LDFLAGS_WINDOW.
	$(SEDI) -E -e 's/^[[:space:]]*LDFLAGS_(CONSOLE|WINDOW).*/& $$(LDFLAGS)/' \
	    work/tk/Makefile
endif
	cd work/tk && $(MAKE) all install-binaries install-libraries
# Tk installs headers on Windows in scope of the install-libraries target. But on other
# platforms, there is a separate target 'install-headers'.
	grep -q '^install-headers:' work/tk/Makefile \
	    && cd work/tk && $(MAKE) install-headers \
	    || : no-op
	test -e $(PREFIX)/lib/libtk*$(SO_EXT) \
	    && chmod +w "$(PREFIX)"/lib/libtk*$(SO_EXT) \
	    && $(STRIP) $(STRIPFLAGS) "$(PREFIX)"/lib/libtk*$(SO_EXT) \
	    || true
	touch $@

tclvfs: work/stamp-tclvfs
work/stamp-tclvfs: work/stamp-tcl
	mkdir -p work/tclvfs/src && cp -r "$(TOP_SRCDIR)/deps/tclvfs"/* work/tclvfs/src
# These files are necessary for installation. See:
	cd work/tclvfs/src && tar xzf "$(TOP_SRCDIR)"/deps/thread.files.tar.gz
	cd work/tclvfs; \
	    test -f config.status \
	    || ./src/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tclvfs && $(MAKE) all install install-lib-binaries CFLAGS="$(CFLAGS)"
	rm -rf work/tclvfs/src
	touch $@

# --enable-internal-debug
# --disable-tcl-commands
cookfs: work/stamp-cookfs
work/stamp-cookfs: work/stamp-tcl
	mkdir -p work/cookfs
	cd work/cookfs; \
	    test -f config.status \
	    || $(TOP_SRCDIR)/deps/cookfs/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-lzma \
	        --disable-bz2 --disable-zstd \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/cookfs && $(MAKE) all install CFLAGS="$(CFLAGS)"
	touch $@

thread: work/stamp-thread
work/stamp-thread: work/stamp-tcl
	mkdir -p work/thread/src && cp -r "$(TOP_SRCDIR)/deps/thread"/* work/thread/src
	cd work/thread; \
	    test -f config.status \
	    || ./src/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
# These files are necessary for installation. See:
# https://github.com/tcltk/thread/blob/0b17425018a6cd3a0fdca30ce3c5fced28d25033/.travis.yml#L124-L127
	cd work/thread/src && tar xzf "$(TOP_SRCDIR)"/deps/thread.files.tar.gz
	cd work/thread && $(MAKE) all install CFLAGS="$(CFLAGS)"
	rm -rf work/thread/src
	touch $@

tclmtls: work/stamp-tclmtls
work/stamp-tclmtls:
	mkdir -p work/tclmtls
	cd work/tclmtls; \
	    test -f config.status \
	    || PKG_CONFIG= $(TOP_SRCDIR)/deps/tclmtls/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-client --disable-server \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tclmtls && $(MAKE) all install CFLAGS="$(CFLAGS)"
	touch $@

tclhttps: work/stamp-tclhttps
work/stamp-tclhttps:
	cd $(TOP_SRCDIR)/deps/tclhttps && make install PREFIX="$(PREFIX)"
	touch $@

tkcon: work/stamp-tkcon
work/stamp-tkcon:
	mkdir -p work/tkcon
	cd work/tkcon; \
	    test -f config.status \
	    || PKG_CONFIG= $(TOP_SRCDIR)/deps/tkcon/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tkcon && $(MAKE) all install CFLAGS="$(CFLAGS)"
	touch $@

tdom: work/stamp-tdom
work/stamp-tdom: work/stamp-tcl
	mkdir -p work/tdom
	cd work/tdom; \
	    test -f config.status \
	    || $(TOP_SRCDIR)/deps/tdom/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tdom && $(MAKE) all install CFLAGS="$(CFLAGS)"
	touch $@

cookit: work/stamp-cookit
work/stamp-cookit: work/stamp-tcl work/stamp-tk work/stamp-tclvfs work/stamp-cookfs work/stamp-tclmtls work/stamp-tkcon work/stamp-thread work/stamp-tdom work/stamp-tclhttps $(if $(filter $(findstring Windows,$(IJ_PLATFORM)),Windows),work/stamp-twapi)
	mkdir -p work/cookit
	cd work/cookit; \
	    test -f Makefile \
	    || $(TOP_SRCDIR)/cookit/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(KIT_PREFIX) \
	        --exec-prefix=$(KIT_PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --with-tk=$(PREFIX)/lib \
	        --with-lib-thread=`echo $(PREFIX)/lib/thread*/*thread*.a` \
	        --with-lib-twapi=`echo $(PREFIX)/lib/twapi*/*twapi*.a` \
	        --with-lib-cookfs=`echo $(PREFIX)/lib/cookfs*/*cookfs*.a` \
	        --with-lib-vfs=`echo $(PREFIX)/lib/vfs*/*vfs*.a` \
	        --with-lib-mtls=`echo $(PREFIX)/lib/mtls*/*mtls*.a` \
	        --with-lib-tdom=`echo $(PREFIX)/lib/tdom*/*tdom0*.a` \
	        --with-strip-command="$(STRIP) $(STRIPFLAGS)" \
	        --with-upx-command="$(UPX)" \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/cookit && $(MAKE) all install-binaries CFLAGS="$(CFLAGS)"
	touch $@

twapi: work/stamp-twapi
work/stamp-twapi: work/stamp-tcl
	mkdir -p work/twapi/src && cp -r "$(TOP_SRCDIR)/deps/twapi"/* work/twapi/src
	chmod +x work/twapi/src/configure work/twapi/src/tclconfig/install-sh
# see details in the patch
	patch -N -p1 -d work/twapi/src < "$(TOP_SRCDIR)"/deps/twapi-000-disable-lzma.patch
	cd work/twapi; \
	    test -f config.status \
	    || ./src/configure \
	        --build=$(AC_HOST) --host=$(AC_HOST) \
	        --prefix=$(PREFIX) \
	        --with-tcl=$(PREFIX)/lib \
	        --enable-shared=no \
	        $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/twapi && $(MAKE) all install install-lib-binaries CFLAGS="$(CFLAGS)"
	cp -f work/twapi/pkgIndex.tcl $(PREFIX)/lib/twapi*
ifeq ($(IJ_PLATFORM),Windows-x86)
	cp -f $(TOP_SRCDIR)/deps/twapi/dyncall/dyncall-*/lib/release_x86/*.lib $(PREFIX)/lib/twapi*
else ifeq ($(IJ_PLATFORM),Windows-x86_64)
	cp -f $(TOP_SRCDIR)/deps/twapi/dyncall/dyncall-*/lib/release_amd64/*.lib $(PREFIX)/lib/twapi*
endif
	rm -rf work/twapi/src
	touch $@

zlib: work/stamp-zlib
work/stamp-zlib:
	mkdir -p work/zlib
	cd work/zlib; \
	    test -f Makefile \
	    || $(TOP_SRCDIR)/deps/zlib/configure \
	        --prefix=$(PREFIX) --static
	cd work/zlib && $(MAKE) all install
	touch $@

dist:
	rm -f "$(IJ_PLATFORM).zip"
	cp -fp $(TOP_SRCDIR)/version kit/$(IJ_PLATFORM)
	cat build.conf environment.conf > kit/$(IJ_PLATFORM)/environment
	cd kit && COOKIT_CONSOLE=1 "$(KIT_PREFIX)/bin/cookit$(EXE_EXT)" \
		`$(CYGPATH) $(TOP_SRCDIR)/cookit/library/make-zip.tcl` \
		../$(IJ_PLATFORM).zip "$(IJ_PLATFORM)"

clean-tcl:
	rm -rf work/tcl work/stamp-tcl
clean-tk:
	rm -rf work/tk work/stamp-tk
clean-cookfs:
	rm -rf work/cookfs work/stamp-cookfs
clean-tclvfs:
	rm -rf work/tclvfs work/stamp-tclvfs
clean-thread:
	rm -rf work/thread work/stamp-thread
clean-cookit:
	rm -rf work/cookit work/stamp-cookit
clean-twapi:
	rm -rf work/twapi work/stamp-twapi
clean-zlib:
	rm -rf work/zlib work/stamp-zlib
clean-tclmtls:
	rm -rf work/tclmtls work/stamp-tclmtls
clean-tkcon:
	rm -rf work/tkcon work/stamp-tkcon
clean-tdom:
	rm -rf work/tdom work/stamp-tdom
clean-tclhttps:
	rm -rf work/stamp-tclhttps

clean:
	rm -rf kit out work
	rm -f $(IJ_PLATFORM).zip

ifeq ($(WINDOWS_SYSTEM),WSL)
# Use native temporary directory for builds for Windows platform on WSL
    CHECK_WORK_DIR := $(shell wslpath -u "$$(cmd.exe /c 'echo %TEMP%\\cookit-test-$(IJ_PLATFORM)' 2>/dev/null)")
else
    CHECK_WORK_DIR := $(TOP_BUILDDIR)/test
endif

define run-check
    $(if $(if $(CHECK_UNSAFE),1,$(filter $1,1)),
        mkdir -p "$(CHECK_WORK_DIR)"
        rm -rf "$(CHECK_WORK_DIR)/$@"
        cp -r "$(TOP_SRCDIR)/$(strip $3)" "$(CHECK_WORK_DIR)/$@"
        cd "$(CHECK_WORK_DIR)" && \
            $(if $(filter $2,tcl),COOKIT_CONSOLE=1,COOKIT_GUI=1) \
            COOKIT_VERSION="`cat "$(TOP_SRCDIR)/version"`" \
            DISPLAY=:0 \
            TCLTEST_OPTIONS="`PLATFORM=$(IJ_PLATFORM) $(TOP_SRCDIR)/cookit/tests/helper.sh $@`" \
            $(KIT_PREFIX)/bin/cookit$(if $(filter $2,tk),-gui,)$(EXE_EXT) \
            `$(CYGPATH) "$(CHECK_WORK_DIR)/$@/all.tcl"` -verbose "body error start" $(TESTFLAGS) | \
            tr -d '\r' | \
            tee $@.output && \
            grep -q 'Failed[[:space:]]\+0$$' $@.output
    ,
        @echo Skipping unsafe check $@
    )
endef

test: $(patsubst %,test-%,$(CHECK_TARGETS))

test-tcl:
	$(call run-check, 0, tcl, deps/tcl/tests)
test-tk:
	$(call run-check, 0, tk, deps/tk/tests)
test-cookfs:
	$(call run-check, 1, tcl, deps/cookfs/tests)
test-tclvfs:
	$(call run-check, 1, tcl, deps/tclvfs/tests)
test-thread:
	$(call run-check, 1, tcl, deps/thread/tests)
test-cookit:
	$(call run-check, 1, tcl, cookit/tests)
	$(call run-check, 1, tk, cookit/tests)
test-twapi:
	$(call run-check, 0, tcl, deps/twapi/tests)
test-tclmtls:
	$(call run-check, 1, tcl, deps/tclmtls/tests)
test-tdom:
	$(call run-check, 1, tcl, deps/tdom/tests)
test-tclhttps:
	$(call run-check, 1, tcl, deps/tclhttps/tests)

distclean: clean
	rm -f Makefile
	rm -f *.zip

.PHONY: reconfig
reconfig:
	$(TOP_SRCDIR)/configure $(CONFIGURE_CMDLINE)
