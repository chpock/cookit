BUILD_ENV = \
	LDFLAGS="$(LDFLAGS)" CFLAGS="$(CFLAGS)" \
	CC="$(CC)" CXX="$(CXX)" RC="$(RC)" STRIP="$(STRIP)" \
	PKG_CONFIG="$(PKG_CONFIG)"

ALL_TARGETS = tcl tk miniarc thread zlib installkit tktable tkdnd ffidl twapi

.PHONY: $(ALL_TARGETS)

.PHONY: $(patsubst %,check-%,$(ALL_TARGETS))

.PHONY: $(patsubst %,clean-%,$(ALL_TARGETS))

.PHONY: all clean check dist distclean

all: $(TARGETS)
	@echo
	@echo "Now type: make dist"
	@echo

tcl: work/stamp-tcl
work/stamp-tcl:
	mkdir -p work/tcl
	cd work/tcl || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/tcl/$(TCL_SYSTEM)/configure \
		--prefix=$(PREFIX) \
		--disable-shared $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tcl \
	 && $(BUILD_ENV) $(MAKE) all install-binaries install-libraries
	touch $@

tk: work/stamp-tk
work/stamp-tk: work/stamp-tcl
	mkdir -p work/tk
	cd work/tk || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/tk/$(TCL_SYSTEM)/configure \
		--prefix=$(PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		$(AQUA_FLAG) $(SHARED_FLAG) $(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/tk \
	 && $(MAKE) all install-binaries install-libraries
	touch $@

miniarc: work/stamp-miniarc
work/stamp-miniarc: work/stamp-tcl work/stamp-zlib
	mkdir -p work/miniarc
	cd work/miniarc || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/miniarc/configure \
		--prefix=$(PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		--with-zlib=$(PREFIX) \
		$(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/miniarc && $(MAKE) all install
	touch $@

thread: work/stamp-thread
work/stamp-thread: work/stamp-tcl
	mkdir -p work/thread
	cd work/thread || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/thread/configure \
		--prefix=$(PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		$(SHARED_FLAG)
	cd work/thread && $(MAKE) all install
	touch $@

# Note: We always build zlib as a static archive library (i.e. libz.a), but
# pass in shared-library flags so that it is compiled as PIC code, thereby
# allowing it to be statically linked into shared libraries.
#
# Note: Yes, the shared library flags are not needed on x86. They _are_
# needed on pretty much every other architecture.
#
zlib: work/stamp-zlib
work/stamp-zlib: work/stamp-tcl
	rm -rf work/zlib
	cp -r $(TOP_SRCDIR)/src/zlib work
	. $(PREFIX)/lib/tclConfig.sh && \
	 cd work/zlib && \
	 CC="$(CC)" \
	 CFLAGS="$(CFLAGS) $$TCL_SHLIB_CFLAGS" \
	 $(CONFIG_SHELL) ./configure --prefix=$(PREFIX)
	cd work/zlib && $(MAKE) install
	touch $@

installkit: work/stamp-installkit
work/stamp-installkit: work/stamp-tcl work/stamp-tk work/stamp-zlib work/stamp-miniarc
	mkdir -p work/installkit
	cd work/installkit || exit; \
	 test -f Makefile \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/installkit/configure \
		--version="$(KIT_VERSION)" \
		--prefix=$(KIT_PREFIX) \
		--debug=$(IK_DEBUG) \
		--with-upx=$(TOP_SRCDIR)/src/installkit/tools/$(IJ_PLATFORM)/upx \
		--with-miniarc-src=$(TOP_SRCDIR)/src/miniarc \
		--with-lzma-src=$(TOP_SRCDIR)/src/miniarc/generic/LzmaC \
		--with-tcl=$(PREFIX)/lib \
		--with-tk=$(PREFIX)/lib \
		--with-zlib=$(PREFIX)
	cd work/installkit && $(MAKE) all install
	touch $@

tktable: work/stamp-tktable
work/stamp-tktable: work/stamp-tcl work/stamp-tk
	mkdir -p work/tktable
	cd work/tktable || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/tktable/configure \
		--prefix=$(KIT_PREFIX) \
		--exec-prefix=$(KIT_PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		--with-tk=$(PREFIX)/lib \
		$(THREADS_FLAG)
# Patch Makefile to enable parallel builds. See:
# https://github.com/wjoye/tktable/pull/4
	$(SEDI) -e 's/^\(all:\).*/\1 tkTable.tcl.h\'"`printf '\n\t'`"'\$$(MAKE) binaries libraries doc/' \
		work/tktable/Makefile
	cd work/tktable && $(MAKE) all
	cd work/tktable && $(MAKE) install-binaries
	$(BUILD_ENV) $(TOP_SRCDIR)/helper.sh strip-dir "$(KIT_PREFIX)"/lib/Tktable*
	touch $@

tkdnd: work/stamp-tkdnd
work/stamp-tkdnd: work/stamp-tcl work/stamp-tk
	mkdir -p work/tkdnd
	cd work/tkdnd || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/tkdnd/configure \
		--prefix=$(KIT_PREFIX) \
		--exec-prefix=$(KIT_PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		--with-tk=$(PREFIX)/lib \
		$(THREADS_FLAG)
ifeq ($(IJ_PLATFORM),Windows)
# Patch Makefile on Windows to disable libwinpthread-1.dll dependency. Setting
# these parameters as LDFLAGS won't help because they must be at the end
# of the linking command.
	$(SEDI) 's/^MAKE_LIB[[:space:]]*=.*/& -static-libgcc -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic/' \
		work/tkdnd/Makefile
endif
	cd work/tkdnd && $(MAKE) all install-binaries
	chmod +x "$(KIT_PREFIX)"/lib/tkdnd*/*.$(SO_EXT)
	$(BUILD_ENV) $(TOP_SRCDIR)/helper.sh strip-dir "$(KIT_PREFIX)"/lib/tkdnd*
	touch $@

ffidl: work/stamp-ffidl
work/stamp-ffidl: work/stamp-tcl
	mkdir -p work/ffidl
	cd work/ffidl || exit; \
	 test -f config.status \
	 || $(BUILD_ENV) $(CONFIG_SHELL) $(TOP_SRCDIR)/src/ffidl/configure \
		--prefix=$(KIT_PREFIX) \
		--exec-prefix=$(KIT_PREFIX) \
		--with-tcl=$(PREFIX)/lib \
		--enable-libffi_static \
		$(SYMBOLS_FLAG) $(THREADS_FLAG)
	cd work/ffidl && $(MAKE) all install-binaries
	mv $(KIT_PREFIX)/lib/Ffidl* $(KIT_PREFIX)/lib/ffidl
	$(BUILD_ENV) $(TOP_SRCDIR)/helper.sh strip-dir "$(KIT_PREFIX)"/lib/ffidl
	touch $@

twapi: work/stamp-twapi
work/stamp-twapi:
	mkdir -p "$(KIT_PREFIX)"/lib/twapi
	cp -r "$(TOP_SRCDIR)/src/twapi"/* "$(KIT_PREFIX)"/lib/twapi
	rm -rf "$(KIT_PREFIX)"/lib/twapi/tests
	touch $@

dist:
	cp -fp $(TOP_SRCDIR)/version kit/$(IJ_PLATFORM)
	cat build.conf environment.conf work/installkit/environment.conf > kit/$(IJ_PLATFORM)/environment
	cd kit && "`echo "$(PREFIX)/bin/tclsh"*`" \
		`$(CYGPATH) $(TOP_SRCDIR)/src/tools/makezip.tcl` \
		../$(IJ_PLATFORM).zip \
		`find $(IJ_PLATFORM) -type f | sort`

clean-tcl:
	rm -rf work/tcl work/stamp-tcl
clean-tk:
	rm -rf work/tk work/stamp-tk
clean-zlib:
	rm -rf work/zlib work/stamp-zlib
clean-miniarc:
	rm -rf work/miniarc work/stamp-miniarc
clean-thread:
	rm -rf work/thread work/stamp-thread
clean-installkit:
	rm -rf work/installkit work/stamp-installkit
clean-tktable:
	rm -rf work/tktable work/stamp-tktable
clean-tkdnd:
	rm -rf work/tkdnd work/stamp-tkdnd
clean-ffidl:
	rm -rf work/ffidl work/stamp-ffidl
clean-twapi:
	rm -rf work/twapi work/stamp-twapi

clean:
	rm -rf kit out work
	rm -f $(IJ_PLATFORM).zip

# CHECK_VERBOSE = -verbose "body error start"

CHECK_CMD = cd tests && \
    DISPLAY=:0 \
    TCLTEST_OPTIONS="`PLATFORM=$(IJ_PLATFORM) $(TOP_SRCDIR)/src/installkit/tests/helper.sh $@`" \
    TCL8_0_TM_PATH=`$(CYGPATH) "$(TOP_SRCDIR)/src/installkit/tests"` \
    $(KIT_PREFIX)/bin/installkit

define run-check
    $(if $(if $(CHECK_UNSAFE),1,$(filter $1,1)),mkdir -p tests && $(CHECK_CMD) `$(CYGPATH) $2` $(CHECK_VERBOSE) | tr -d '\r' | tee $@.output && grep -q 'Failed[[:space:]]\+0$$' $@.output,@echo Skipping unsafe check $@)
endef

check: $(patsubst %,check-%,$(TARGETS))

check-tcl:
	$(call run-check, 0, $(TOP_SRCDIR)/src/tcl/tests/all.tcl)
check-tk:
	$(call run-check, 0, $(TOP_SRCDIR)/src/tk/tests/all.tcl)
check-zlib:
	@: no-op
check-miniarc:
	@: no-op
check-thread:
	$(call run-check, 1, $(TOP_SRCDIR)/src/thread/tests/all.tcl)
check-installkit:
	$(call run-check, 1, $(TOP_SRCDIR)/src/installkit/tests/all.tcl)
check-tktable:
	$(call run-check, 1, $(TOP_SRCDIR)/src/tktable/tests/all.tcl)
check-tkdnd:
	@: no-op
check-ffidl:
	@: no-op
check-twapi:
	$(call run-check, 0, $(TOP_SRCDIR)/src/twapi/tests/all.tcl)

distclean: clean
	rm -f Makefile
	rm -f *.zip
