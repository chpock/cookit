#!/bin/sh

ABS_TOP_BUILDDIR="$(/bin/pwd)"

TOP_SRCDIR="$(dirname "$0")"
ABS_TOP_SRCDIR="$(cd "$TOP_SRCDIR" && /bin/pwd)"

help() {
  echo "configure parameters available:"
  echo ""
  echo "--help                Displays this page"
  echo "--debug               Enable additional Tcl debugging features"
  echo "--platform <platform> Build specific platform"
  echo "--toolchain-prefix <prefix>"
  echo "                      Use the prefix for the build toolchain"
  echo "                      (gcc/g++/windres etc.)"
  echo "--strip-utility <path>"
  echo "                      Use the specified command to remove debugging"
  echo "                      information from binaries"
  echo "--buildtype dev|debug|release"
  echo "                      Apply a specific set of parameters"
  echo "--tcl-version <major_version>"
  echo "                      Build against specified major Tcl version"
  echo
  exit 0
}

# debug / dev / release
: ${BUILD_TYPE:=dev}

CONFIGURE_CMDLINE="$@"

while [ "$#" != 0 ]; do
  case "$1" in
      -h|--help)
          help
          ;;
      --platform)
          shift
          IJ_PLATFORM="$1"
          ;;
      --toolchain-prefix)
          shift
          TOOLCHAIN_PREFIX="$1"
          ;;
      --buildtype)
          shift
          case "$1" in
              debug)
                  BUILD_TYPE="debug"
                  IK_DEBUG=1
                  ;;
              dev)
                  BUILD_TYPE="dev"
                  ;;
              release)
                  BUILD_TYPE="release"
                  ;;
              *)
                  echo "Unknown build type: '$1'"
                  echo
                  help
                  exit 1
                  ;;
          esac
          ;;
      --debug)
          IK_DEBUG=1
          BUILD_TYPE="debug"
          echo "Extra debugging features enabled"
          ;;
      --strip-utility)
          shift
          STRIP="$1"
          ;;
      --tcl-version)
          shift
          TCL_MAJOR_VERSION="$1"
          ;;
      *)
          echo "Invalid configure option $i"
          help
          exit 1
          ;;
  esac
  shift
done

[ -n "$IJ_PLATFORM" ] || IJ_PLATFORM="$($TOP_SRCDIR/helper.sh platform)"
[ -n "$TCL_MAJOR_VERSION" ] || TCL_MAJOR_VERSION="9"

echo
echo "Platform is $IJ_PLATFORM"
echo

TCL_SYSTEM=unix
TARGETS="cookit"
SYMBOLS_FLAG=
AQUA_FLAG=
TK_SHARED_FLAG="--enable-shared --disable-static"
THREADS_FLAG="--enable-threads"
# -ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--as-needed
#     help to avoid unused code in binary
# -fno-unwind-tables -fno-asynchronous-unwind-tables
#     disable .eh_frame section which is for stacktraces/debugging
# -fno-stack-protector
#     save some space by disabling the stack protector
# -fomit-frame-pointer
#     this flag is enabled for optimized Tcl, enable it everywhere
# -fmerge-all-constants
#     save some space by merging all constants
# -fno-unroll-loops
#     make sure we don't unroll loops
GCC_CFLAGS="-Os -fno-unroll-loops -fmerge-all-constants -fno-stack-protector -fomit-frame-pointer -fno-unwind-tables -fno-asynchronous-unwind-tables -ffunction-sections -fdata-sections"
GCC_LDFLAGS="-Wl,--gc-sections -Wl,--as-needed"
# -Wl,-dead_strip
#     help to avoid unused code in binary
# -Wl,-x,-S
#     strip debug info
#         -S Do not put debug information (STABS or DWARF) in the output file
#         -x Do not put non-global symbols in the output file's symbol table
# -fno-stack-protector
#     save some space by disabling the stack protector
# -fomit-frame-pointer
#     this flag is enabled for optimized Tcl, enable it everywhere
# -fmerge-all-constants
#     save some space by merging all constants
# -fno-unroll-loops
#     make sure we don't unroll loops
CLANG_CFLAGS="-Os -fno-unroll-loops -fmerge-all-constants -fno-stack-protector -fomit-frame-pointer"
CLANG_LDFLAGS="-Wl,-dead_strip,-x,-S"
CYGPATH="echo"
KIT_VERSION="`cat "$TOP_SRCDIR"/version`"
SEDI="sed -i"
UPX="$ABS_TOP_SRCDIR/cookit/tools/$IJ_PLATFORM/upx"
STRIPFLAGS="--strip-all"
if [ "$BUILD_TYPE" = "dev" ]; then
    UPX_ARGS="--lzma --overlay=strip"
else
    UPX_ARGS="--ultra-brute --overlay=strip"
fi
COMPILER="GCC"

case "$IJ_PLATFORM" in
  i686-w64-mingw32)
    UPX="${UPX}.exe"
    TCL_SYSTEM=win
    TK_SHARED_FLAG="--disable-shared --enable-static"
    if uname -r | grep -q -- '-WSL2'; then
        WINDOWS_SYSTEM=WSL
        CYGPATH="wslpath -w"
        if ! command -v tclsh >/dev/null 2>&1; then
            echo "Error: could not find native tclsh command. It is required for Tcl build."
            echo "Install it using native package manager"
            exit 1
        fi
    else
        WINDOWS_SYSTEM=Cygwin
        CYGPATH="cygpath -m"
    fi
    AC_HOST="i686-w64-mingw32"
    SO_EXT=".dll"
    ;;

  x86_64-w64-mingw32)
    UPX="${UPX}.exe"
    TCL_SYSTEM=win
    TK_SHARED_FLAG="--disable-shared --enable-static"
    if uname -r | grep -q -- '-WSL2'; then
        WINDOWS_SYSTEM=WSL
        CYGPATH="wslpath -w"
        if ! command -v tclsh >/dev/null 2>&1; then
            echo "Error: could not find native tclsh command. It is required for Tcl build."
            echo "Install it using native package manager"
            exit 1
        fi
    else
        WINDOWS_SYSTEM=Cygwin
        CYGPATH="cygpath -m"
    fi
    AC_HOST="x86_64-w64-mingw32"
    SO_EXT=".dll"
    ;;

  i686-pc-linux-gnu)
    CFLAGS="-m32 $CFLAGS"
    LDFLAGS="-m32 $LDFLAGS"
    AC_HOST="i686-pc-linux-gnu"
    STRIPFLAGS="$STRIPFLAGS --remove-section=.comment --remove-section=.note"
    SO_EXT=".so"
    ;;

  x86_64-pc-linux-gnu)
    CFLAGS="-m64 $CFLAGS"
    LDFLAGS="-m64 $LDFLAGS"
    AC_HOST="x86_64-pc-linux-gnu"
    STRIPFLAGS="$STRIPFLAGS --remove-section=.comment --remove-section=.note"
    SO_EXT=".so"
    ;;

  i386-apple-darwin10.10)
    COMPILER="CLANG"
    # NS_BUILD_32_LIKE_64 is required to build Tk8.6.13 on i383 platform. See:
    # http://theocacao.com/document.page/552
    CFLAGS="-arch i386 -DNS_BUILD_32_LIKE_64 $CFLAGS"
    # 10.10 is the minimum version for Tk9.0:
    # https://core.tcl-lang.org/tk/tktview/cb052066deda07b2b94a2d097770b7e76793d802
    CFLAGS="$CFLAGS -mmacosx-version-min=10.10"
    AQUA_FLAG="--enable-aqua"
    # on BSD sed the extension after -i is mandatory
    SEDI="sed -i ''"
    # don't use UPX on MacOS for now due to multiple issues, like:
    # https://github.com/upx/upx/issues/777
    UPX="echo"
    AC_HOST="i386-apple-darwin10.10"
    STRIPFLAGS="-Sx"
    SO_EXT=".dylib"
    ;;

  x86_64-apple-darwin10.10)
    COMPILER="CLANG"
    CFLAGS="-arch x86_64 $CFLAGS"
    # 10.10 is the minimum version for Tk9.0:
    # https://core.tcl-lang.org/tk/tktview/cb052066deda07b2b94a2d097770b7e76793d802
    CFLAGS="$CFLAGS -mmacosx-version-min=10.10"
    AQUA_FLAG="--enable-aqua"
    # on BSD sed the extension after -i is mandatory
    SEDI="sed -i ''"
    # don't use UPX on MacOS for now due to multiple issues, like:
    # https://github.com/upx/upx/issues/777
    UPX="echo"
    AC_HOST="x86_64-apple-darwin10.10"
    STRIPFLAGS="-Sx"
    SO_EXT=".dylib"
    ;;

  arm64-apple-darwin10.10)
    COMPILER="CLANG"
    CFLAGS="-arch arm64 $CFLAGS"
    # 10.10 is the minimum version for Tk9.0:
    # https://core.tcl-lang.org/tk/tktview/cb052066deda07b2b94a2d097770b7e76793d802
    CFLAGS="$CFLAGS -mmacosx-version-min=10.10"
    CFLAGS="-DSTDC_HEADERS $CFLAGS"
    AQUA_FLAG="--enable-aqua"
    # on BSD sed the extension after -i is mandatory
    SEDI="sed -i ''"
    # don't use UPX on MacOS for now due to multiple issues, like:
    # https://github.com/upx/upx/issues/777
    UPX="echo"
    AC_HOST="arm64-apple-darwin10.10"
    STRIPFLAGS="-Sx"
    SO_EXT=".dylib"
    ;;

  powerpc-apple-darwin10.10)
    COMPILER="CLANG"
    # 10.10 is the minimum version for Tk9.0:
    # https://core.tcl-lang.org/tk/tktview/cb052066deda07b2b94a2d097770b7e76793d802
    CFLAGS="$CFLAGS -mmacosx-version-min=10.10"
    AQUA_FLAG="--enable-aqua"
    # on BSD sed the extension after -i is mandatory
    SEDI="sed -i ''"
    # don't use UPX on MacOS for now due to multiple issues, like:
    # https://github.com/upx/upx/issues/777
    UPX="echo"
    AC_HOST="powerpc-apple-darwin10.10"
    STRIPFLAGS="-Sx"
    SO_EXT=".dylib"
    ;;
esac

if [ -n "$IK_DEBUG" ]; then
    SYMBOLS_FLAG="--enable-symbols=all"
    GCC_LDFLAGS=""
    GCC_CFLAGS=""
    STRIP="echo"
    UPX="echo"
    CFLAGS="-DPURIFY -fsanitize=undefined -fsanitize=address $CFLAGS"
    LDFLAGS="-fsanitize=undefined -fsanitize=address $LDFLAGS"
fi

if [ "$COMPILER" = "GCC" ]; then
    CFLAGS="$GCC_CFLAGS $CFLAGS"
    LDFLAGS="$GCC_LDFLAGS $LDFLAGS"
elif [ "$COMPILER" = "CLANG" ]; then
    CFLAGS="$CLANG_CFLAGS $CFLAGS"
    LDFLAGS="$CLANG_LDFLAGS $LDFLAGS"
else
    echo "Error: unknown compiler '$COMPILER'"
fi

UPX="$UPX $UPX_ARGS"

if command -v ccache >/dev/null 2>&1; then
    CCACHE="ccache "
    echo "Info: ccache is enabled"
else
    unset CCACHE
fi

: ${CC:=${CCACHE}${TOOLCHAIN_PREFIX}gcc}
: ${CXX:=${CCACHE}${TOOLCHAIN_PREFIX}g++}
: ${PKG_CONFIG:=${TOOLCHAIN_PREFIX}pkg-config}
: ${STRIP:=${TOOLCHAIN_PREFIX}strip}
: ${RC:=${TOOLCHAIN_PREFIX}windres}

CC="${CC}" CXX="${CXX}" "$TOP_SRCDIR/helper.sh" environment > build.conf

if [ "$TCL_MAJOR_VERSION" = "8" ]; then
    TCL_SOURCE_SUBDIR="tcl8.6"
    BIN_SUFFIX="8"
elif [ "$TCL_MAJOR_VERSION" = "9" ]; then
    TCL_SOURCE_SUBDIR="tcl9.0"
    BIN_SUFFIX=""
else
    echo "Error: unknown Tcl major version '$TCL_MAJOR_VERSION'" >&2
    exit 1
fi

cat > environment.conf << EOF
## General build configuration
## Created with $0 $CONFIGURE_CMDLINE

CONFIGURE_CMDLINE = $CONFIGURE_CMDLINE

IK_DEBUG        = $IK_DEBUG

TOP_SRCDIR      = $ABS_TOP_SRCDIR
TOP_BUILDDIR    = $ABS_TOP_BUILDDIR

KIT_VERSION     = $KIT_VERSION

CC              = $CC
CXX             = $CXX
PKG_CONFIG      = $PKG_CONFIG
STRIP           = $STRIP
RC              = $RC

UPX             = $UPX

CFLAGS          = $CFLAGS
LDFLAGS         = $LDFLAGS
STRIPFLAGS      = $STRIPFLAGS
AQUA_FLAG       = $AQUA_FLAG
TK_SHARED_FLAG  = $TK_SHARED_FLAG
THREADS_FLAG    = $THREADS_FLAG
SYMBOLS_FLAG    = $SYMBOLS_FLAG

TCL_SYSTEM      = $TCL_SYSTEM
IJ_PLATFORM     = $IJ_PLATFORM
AC_HOST         = $AC_HOST
CYGPATH         = $CYGPATH
WINDOWS_SYSTEM  = $WINDOWS_SYSTEM

TCL_SOURCE_SUBDIR = $TCL_SOURCE_SUBDIR
BIN_SUFFIX        = $BIN_SUFFIX

TARGETS         = $TARGETS

EOF

cat > Makefile << EOF
##
## Makefile
##
## Created with $0 $@
##

PREFIX          = \$(TOP_BUILDDIR)/out
KIT_PREFIX      = \$(TOP_BUILDDIR)/kit/\$(IJ_PLATFORM)

# Platform-specific
SEDI            = $SEDI
SO_EXT          = $SO_EXT

EOF

cat >> Makefile < environment.conf
cat >> Makefile < "$TOP_SRCDIR/Makefile.in"

if [ "$WINDOWS_SYSTEM" = "WSL" ] && ! net.exe session >/dev/null 2>&1; then
    echo ""
    echo "WARNING: current shell is not running in elevated mode. This will cause some"
    echo "         of cookit tests to be skipped. Install gsudo ( https://gerardog.github.io/gsudo/docs/install )"
    echo "         and use elevated shell to build."
    echo ""
fi

echo "Now type: make"
echo
