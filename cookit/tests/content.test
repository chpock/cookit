# cookit tests - content
#
# Copyright (C) 2024 Konstantin Kushnir <chpock@gmail.com>
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.

# These tests check the expected content in cookit vfs

if { [lsearch [namespace children] ::tcltest] == -1 } {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

testConstraint darwin [expr {[testConstraint unix] && $tcl_platform(os) eq "Darwin"}]
testConstraint notDarwin [expr {![testConstraint darwin]}]
testConstraint cookitVersionDefined [info exists ::env(COOKIT_VERSION)]
testConstraint pkgconfig [llength [info commands ::tcl::pkgconfig]]

test content-1 {check cookit version} -constraints cookitVersionDefined -body {
    string equal [package require cookit $::env(COOKIT_VERSION)] $::env(COOKIT_VERSION)
} -result 1

test content-2.1.1 {check Tcl version} -body {
    expr { [package require Tcl] in {8.6.15 9.0.0} }
} -result 1

test content-2.2.1 {check Thread version} -body {
    expr { [package require Thread] in {2.8.10 3.0.0} }
} -result 1

foreach { pkgName pkgVersion constraints } {
    http                2.9.8  {}
    https               0.1.0  {}
    msgcat              1.6.1  {}
    registry            1.3.5  {win}
    twapi               5.0a1  {win}
    vfs                 1.4.2  {}
    cookfs              1.9.0  {}
    tdom                0.9.4  {}
} {
    test content-3.[incr count] [list package require $pkgName $pkgVersion] \
        -constraints $constraints \
        -body [list package require $pkgName $pkgVersion] \
        -returnCodes ok -match glob -result *
}
unset count

test content-6 {icon exists} -constraints win -body {
    file exists [file join $::cookit::root cookit.ico]
} -result 1

test content-7 {::tcl::pkgconfig values} -constraints pkgconfig -body {
    set result [list]
    foreach { key1 key2 val } [list \
        libdir,runtime     libdir,install      [file join $::cookit::root lib] \
        bindir,runtime     bindir,install      [file join $::cookit::root bin] \
        scriptdir,runtime  scriptdir,install   [file join $::cookit::root lib tcl[info tclversion]] \
        includedir,runtime includedir,install  [file join $::cookit::root include] \
        docdir,runtime     docdir,install      [file join $::cookit::root share man] \
    ] {
        if { [::tcl::pkgconfig get $key1] ne $val } {
            lappend result "::tcl::pkgconfig get $key1 != '$val' (actual value: '[::tcl::pkgconfig get $key1]')"
        }
        if { [::tcl::pkgconfig get $key2] ne $val } {
            lappend result "::tcl::pkgconfig get $key2 != '$val' (actual value: '[::tcl::pkgconfig get $key2]')"
        }
    }
    join $result \n
} -result {}

# cleanup
::tcltest::cleanupTests
return
